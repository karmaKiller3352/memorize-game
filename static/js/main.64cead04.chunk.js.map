{"version":3,"sources":["utils.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["msNormalize","ms","msec","String","sec","Math","floor","padStart","slice","Timer","run","useState","time","setTime","timerId","useRef","useEffect","current","setTimeout","prevTime","prev","localStorage","setItem","clearTimeout","className","colors","bg","text","App","difficulty","setDifficulty","timer","setTimer","ceils","setCeils","openedCeils","setOpenedCeil","gameStatus","setGameStatus","openCeilValues","setOpenCeilValues","checkCeils","value","first","index","state","second","htmlFor","disabled","id","onClick","target","Number","prepared","sort","random","i","push","color","preparedCeils","forEach","ceil","Object","keys","map","e","length","openCeil","style","width","height","backgroundColor","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQAAaA,G,YAAc,SAACC,GAC1B,IAAMC,EAAOC,OAAOF,EAAK,KACnBG,EAAMD,OAAOE,KAAKC,MAAML,EAAK,MACnC,MAAM,GAAN,OAAUG,EAAIG,SAAS,EAAG,KAA1B,cAAoCL,EAAKK,SAAS,EAAG,KAAKC,MAAM,EAAG,MCCtD,SAASC,EAAT,GAAyB,IAARC,EAAO,EAAPA,IAAO,EACbC,mBAAS,GADI,mBAC9BC,EAD8B,KACxBC,EADwB,KAE/BC,EAAUC,kBAAO,GAmBvB,OAlBAC,qBAAU,WAaR,OAZIN,EACFI,EAAQG,QAAUC,YAAW,WAC3BL,GAAQ,SAACM,GAAD,OAAcA,EAAW,SAChC,MAEHN,GAAQ,SAACO,GAEP,OADAC,aAAaC,QAAQ,YAAatB,EAAYY,IACvC,KAETW,aAAaT,EAAQG,UAGhB,WACLM,aAAaT,EAAQG,YAEtB,CAACP,EAAKE,IAEF,0BAAMY,UAAU,SAASxB,EAAYY,ICrB9C,IAAMa,EAAS,CACb,CAAEC,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,QACvB,CAAED,GAAI,UAAWC,KAAM,SAiJVC,MA9If,WAAgB,IAAD,EACuBjB,mBAAS,GADhC,mBACNkB,EADM,KACMC,EADN,OAEanB,oBAAS,GAFtB,mBAENoB,EAFM,KAECC,EAFD,OAGarB,mBAAS,IAHtB,mBAGNsB,EAHM,KAGCC,EAHD,OAIwBvB,mBAAS,GAJjC,mBAINwB,EAJM,KAIOC,EAJP,OAKuBzB,oBAAS,GALhC,mBAKN0B,EALM,KAKMC,EALN,OAM+B3B,mBAAS,IANxC,mBAMN4B,EANM,KAMUC,EANV,KAQbxB,qBAAU,WACJmB,IAAgBN,EAAaA,GAAYG,GAAS,KACrD,CAACG,EAAaN,IAEjB,IA4DMY,EAAa,WACbF,EAAe,GAAGG,QAAUH,EAAe,GAAGG,MAChDxB,YAAW,WACTgB,GAAS,SAACd,GAAU,IAAD,EACXuB,EAAK,2BAAQvB,EAAKmB,EAAe,GAAGK,QAA/B,IAAuCC,MAAO,UACnDC,EAAM,2BAAQ1B,EAAKmB,EAAe,GAAGK,QAA/B,IAAuCC,MAAO,UAC1D,OAAO,2BACFzB,GADL,uBAEGmB,EAAe,GAAGK,MAAQD,GAF7B,cAGGJ,EAAe,GAAGK,MAAQE,GAH7B,OAMFN,EAAkB,MACjB,MAEHA,EAAkB,IAClBJ,GAAc,SAAChB,GAAD,OAAUA,EAAO,OA0BnC,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,cACb,2BAAOuB,QAAQ,cAAf,qBACA,yCACM,CAAEC,SAAUX,GADlB,CAEEY,GAAG,aACHC,QA9GY,SAAC,GAA2B,IAAfR,EAAc,EAAxBS,OAAUT,MACjCZ,EAAcsB,OAAOV,IACrBJ,GAAc,MA8GN,4BAAQI,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,UAGJ,yBAAKlB,UAAU,cACb,4BAAQ0B,QAhHK,WACnB,GAAIb,EAAY,OAAO,EAEvBG,EAAkB,IAElB,IAAMa,EAAW,GACjB5B,EAAO6B,MAAK,kBAAMjD,KAAKkD,SAAW,MAElC,IAAK,IAAIC,EAAI,EAAGA,GAAM3B,EAAaA,EAAc,EAAG2B,IAClDH,EAASI,KACP,CACEf,MAAOc,EACPX,MAAO,QACPnB,GAAID,EAAO+B,EAAI,GAAG9B,GAClBgC,MAAOjC,EAAO+B,EAAI,GAAG7B,MAEvB,CACEe,MAAOc,EACPX,MAAO,QACPnB,GAAID,EAAO+B,EAAI,GAAG9B,GAClBgC,MAAOjC,EAAO+B,EAAI,GAAG7B,OAI3B0B,EAASC,MAAK,kBAAMjD,KAAKkD,SAAW,MAAKD,MAAK,kBAAMjD,KAAKkD,SAAW,MACpE,IAAMI,EAAgB,GACtBN,EAASO,SAAQ,SAACC,EAAMjB,GACtBe,EAAcf,GAASiB,KAGzB3B,EAASyB,GACT3B,GAAS,GACTM,GAAc,KAgFR,eAEF,yBAAKd,UAAU,cACb,kBAAC,EAAD,CAAOd,IAAKqB,MAGhB,yBAAKP,UAAU,gBACb,yBAAKA,UAAU,SAASa,GA3CrByB,OAAOC,KAAK9B,GAAO+B,KAAI,SAACR,GAC7B,IA1CiBZ,EA0CXiB,EAAO5B,EAAMuB,GAEnB,OACE,0BACEN,QAAwB,SAAfW,EAAKhB,OA9CDD,EA8CgCY,EA9CtB,SAACS,GAC9B,GAAI1B,EAAe2B,OAAS,EAC1B,OAAO,EAEThC,GAAS,SAACd,GACR,IAAM+C,EAAQ,2BAAQ/C,EAAKwB,IAAb,IAAqBC,MAAO,SAC1C,OAAO,2BAAKzB,GAAZ,kBAAmBwB,EAAQuB,OAG7B3B,GAAkB,SAACpB,GAOjB,OANImB,EAAe2B,OAAS,IAC1B9C,EAAKqC,KAAL,2BAAexB,EAAMW,IAArB,IAA6BA,WACC,IAA1BL,EAAe2B,QACjBzB,KAGGrB,OA8B+C,kBAAM,GACxDgD,MAAO,CACLC,MAAO,IAAMxC,EACbyC,OAAQ,IAAMzC,EACd0C,gBAAiBV,EAAKnC,GACtBgC,MAAOG,EAAKH,OAEdlC,UAAS,eAAUqC,EAAKhB,OACxB2B,IAAKhB,GAEJK,EAAKnB,cCzHI+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64cead04.chunk.js","sourcesContent":["export const msNormalize = (ms) => {\n  const msec = String(ms % 10000);\n  const sec = String(Math.floor(ms / 10000));\n  return `${sec.padStart(2, '0')} : ${msec.padStart(2, '0').slice(0, 2)}`;\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport './Timer.scss';\nimport { msNormalize } from './utils';\n\nexport default function Timer({ run }) {\n  const [time, setTime] = useState(0);\n  const timerId = useRef(false);\n  useEffect(() => {\n    if (run) {\n      timerId.current = setTimeout(() => {\n        setTime((prevTime) => prevTime + 1000);\n      }, 100);\n    } else {\n      setTime((prev) => {\n        localStorage.setItem('timeSpent', msNormalize(time));\n        return 0;\n      });\n      clearTimeout(timerId.current);\n    }\n\n    return () => {\n      clearTimeout(timerId.current);\n    };\n  }, [run, time]);\n\n  return <span className='timer'>{msNormalize(time)}</span>;\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport Timer from './Timer';\n\nconst colors = [\n  { bg: '#00ffff', text: '#000' },\n  { bg: '#808080', text: '#fff' },\n  { bg: '#000080', text: '#fff' },\n  { bg: '#c0c0c0', text: '#000' },\n  { bg: '#000000', text: '#fff' },\n  { bg: '#008000', text: '#fff' },\n  { bg: '#808000', text: '#fff' },\n  { bg: '#008080', text: '#fff' },\n  { bg: '#0000ff', text: '#fff' },\n  { bg: '#00ff00', text: '#000' },\n  { bg: '#800080', text: '#fff' },\n  { bg: '#ffffff', text: '#000' },\n  { bg: '#ff00ff', text: '#000' },\n  { bg: '#800000', text: '#fff' },\n  { bg: '#ff0000', text: '#fff' },\n  { bg: '#ffff00', text: '#000' },\n  { bg: '#663399', text: '#fff' },\n  { bg: '#2f4f4f', text: '#fff' },\n];\n\nfunction App() {\n  const [difficulty, setDifficulty] = useState(4);\n  const [timer, setTimer] = useState(false);\n  const [ceils, setCeils] = useState({});\n  const [openedCeils, setOpenedCeil] = useState(0);\n  const [gameStatus, setGameStatus] = useState(false);\n  const [openCeilValues, setOpenCeilValues] = useState([]);\n\n  useEffect(() => {\n    if (openedCeils === difficulty * difficulty) setTimer(false);\n  }, [openedCeils, difficulty]);\n\n  const selectHandler = ({ target: { value } }) => {\n    setDifficulty(Number(value));\n    setGameStatus(false);\n  };\n\n  const startHandler = () => {\n    if (gameStatus) return false;\n\n    setOpenCeilValues([]);\n\n    const prepared = [];\n    colors.sort(() => Math.random() - 0.5);\n\n    for (let i = 1; i <= (difficulty * difficulty) / 2; i++) {\n      prepared.push(\n        {\n          value: i,\n          state: 'close',\n          bg: colors[i - 1].bg,\n          color: colors[i - 1].text,\n        },\n        {\n          value: i,\n          state: 'close',\n          bg: colors[i - 1].bg,\n          color: colors[i - 1].text,\n        }\n      );\n    }\n    prepared.sort(() => Math.random() - 0.5).sort(() => Math.random() - 0.5);\n    const preparedCeils = {};\n    prepared.forEach((ceil, index) => {\n      preparedCeils[index] = ceil;\n    });\n\n    setCeils(preparedCeils);\n    setTimer(true);\n    setGameStatus(true);\n  };\n\n  const handleClick = (index) => (e) => {\n    if (openCeilValues.length > 1) {\n      return false;\n    }\n    setCeils((prev) => {\n      const openCeil = { ...prev[index], state: 'open' };\n      return { ...prev, [index]: openCeil };\n    });\n\n    setOpenCeilValues((prev) => {\n      if (openCeilValues.length < 2) {\n        prev.push({ ...ceils[index], index });\n        if (openCeilValues.length === 2) {\n          checkCeils();\n        }\n      }\n      return prev;\n    });\n  };\n\n  const checkCeils = () => {\n    if (openCeilValues[0].value !== openCeilValues[1].value) {\n      setTimeout(() => {\n        setCeils((prev) => {\n          const first = { ...prev[openCeilValues[0].index], state: 'close' };\n          const second = { ...prev[openCeilValues[1].index], state: 'close' };\n          return {\n            ...prev,\n            [openCeilValues[0].index]: first,\n            [openCeilValues[1].index]: second,\n          };\n        });\n        setOpenCeilValues([]);\n      }, 1000);\n    } else {\n      setOpenCeilValues([]);\n      setOpenedCeil((prev) => prev + 2);\n    }\n  };\n\n  const showCeils = () => {\n    return Object.keys(ceils).map((i) => {\n      const ceil = ceils[i];\n\n      return (\n        <span\n          onClick={ceil.state !== 'open' ? handleClick(i) : () => false}\n          style={{\n            width: 650 / difficulty,\n            height: 650 / difficulty,\n            backgroundColor: ceil.bg,\n            color: ceil.color,\n          }}\n          className={`ceil ${ceil.state}`}\n          key={i}\n        >\n          {ceil.value}\n        </span>\n      );\n    });\n  };\n\n  return (\n    <div className='App'>\n      <div className='sidebar'>\n        <div className='form-group'>\n          <label htmlFor='difficulty'>Choose difficulty</label>\n          <select\n            {...{ disabled: gameStatus }}\n            id='difficulty'\n            onClick={selectHandler}\n          >\n            <option value='4'>Easy</option>\n            <option value='6'>Hard</option>\n          </select>\n        </div>\n        <div className='form-group'>\n          <button onClick={startHandler}>Start game</button>\n        </div>\n        <div className='form-group'>\n          <Timer run={timer} />\n        </div>\n      </div>\n      <div className='game-wrapper'>\n        <div className='field'>{gameStatus && showCeils()}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}